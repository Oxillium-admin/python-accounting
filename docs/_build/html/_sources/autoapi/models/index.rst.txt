:py:mod:`models`
================

.. py:module:: models

.. autoapi-nested-parse::

   Provides models for accounting objects.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   account/index.rst
   assignment/index.rst
   balance/index.rst
   base/index.rst
   category/index.rst
   currency/index.rst
   entity/index.rst
   ledger/index.rst
   line_item/index.rst
   recyclable/index.rst
   recyled/index.rst
   reporting_period/index.rst
   tax/index.rst
   transaction/index.rst
   user/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   models.Base
   models.Recyclable
   models.Currency
   models.User
   models.Recycled
   models.ReportingPeriod
   models.Entity
   models.Account
   models.Category
   models.LineItem
   models.Transaction
   models.Balance
   models.Tax
   models.Ledger
   models.Assignment




.. py:class:: Base


   Bases: :py:obj:`sqlalchemy.orm.DeclarativeBase`

   The accounting model base class

   .. attribute:: id

      The primary key of the model database record.

      :type: int

   .. attribute:: created_at

      The time the database record was created.

      :type: datetime

   .. attribute:: update_at

      The time the database record was last modified.

      :type: datetime

   .. py:attribute:: id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: created_at
      :type: sqlalchemy.orm.Mapped[datetime.datetime]

      

   .. py:attribute:: updated_at
      :type: sqlalchemy.orm.Mapped[datetime.datetime]

      

   .. py:method:: __tablename__() -> str



.. py:class:: Recyclable


   Bases: :py:obj:`src.models.Base`

   Interface for associating recycled objects with its models.

   .. attribute:: deleted_at

      The time the model was recycled.

      :type: :obj:`datetime`, optional

   .. attribute:: destroyed_at

      The time the model was recycled
      permanently deleted.

      :type: :obj:`datetime`, optional

   .. attribute:: recycled_type

      The class name of the recycled model.

      :type: str

   .. py:attribute:: deleted_at
      :type: sqlalchemy.orm.Mapped[datetime.datetime]

      

   .. py:attribute:: destroyed_at
      :type: sqlalchemy.orm.Mapped[datetime.datetime]

      

   .. py:attribute:: recycled_type
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: history
      :type: sqlalchemy.orm.Mapped[List[Recycled]]

      

   .. py:attribute:: __mapper_args__

      


.. py:class:: Currency


   Bases: :py:obj:`src.mixins.IsolatingMixin`, :py:obj:`src.models.Recyclable`

   Represents a Currency in terms of a label and an ISO Currency Code.

   .. attribute:: id

      The primary key of the Category database record.

      :type: int

   .. attribute:: name

      The label of the Currency.

      :type: str

   .. attribute:: code

      The ISO 4217 currency code symbol.

      :type: str

   .. py:attribute:: __mapper_args__

      

   .. py:attribute:: id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: name
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: code
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:method:: __repr__() -> str



.. py:class:: User


   Bases: :py:obj:`src.mixins.IsolatingMixin`, :py:obj:`models.base.Base`

   Represents an authenicatable User with access to an Entity.

   .. attribute:: name

      The name of the User.

      :type: str

   .. attribute:: email

      A unique email to identify the User.

      :type: str

   .. py:attribute:: name
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: email
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:method:: __repr__() -> str



.. py:class:: Recycled


   Bases: :py:obj:`src.mixins.IsolatingMixin`, :py:obj:`models.base.Base`

   Represents an accounting model that has been recycled.

   .. attribute:: recycled_id

      The id of the model that has been recycled.

      :type: int

   .. attribute:: restored_at

      The time the model was restored.

      :type: :obj:`datetime`, optional

   .. py:attribute:: recycled_id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: restored_at
      :type: sqlalchemy.orm.Mapped[datetime.datetime]

      

   .. py:attribute:: subject
      :type: sqlalchemy.orm.Mapped[Recyclable]

      

   .. py:method:: __repr__() -> str



.. py:class:: ReportingPeriod


   Bases: :py:obj:`src.mixins.IsolatingMixin`, :py:obj:`src.models.Recyclable`

   Represents a financial cycle for the Reporting Entity.

   .. attribute:: id

      The primary key of the Reporting Period database record.

      :type: int

   .. attribute:: calendar_year

      The calendar year associated with the Reporting
      Period.

      :type: int

   .. attribute:: period_count

      The number of periods that have passed since the
      system has been in use.

      :type: int

   .. attribute:: status

      The status of the Reporting Period.

      :type: ReportingPeriod.Status

   .. py:class:: Status(*args, **kwds)


      Bases: :py:obj:`enum.Enum`

      Represents a Reporting Period's status.

      .. attribute:: OPEN

         The period is current and Transactions may be posted to it.

      .. attribute:: ADJUSTING

         The period is past and only Journal Entry Transactions
         may be posted to it (E.g Audit Adjustments).

      .. attribute:: CLOSED

         The period is past and no more Transactions may be posted
         to it.

      .. py:attribute:: OPEN
         :value: 0

         

      .. py:attribute:: ADJUSTING
         :value: 1

         

      .. py:attribute:: CLOSED
         :value: 2

         


   .. py:attribute:: __tablename__
      :value: 'reporting_period'

      

   .. py:attribute:: __table_args__
      :value: ()

      

   .. py:attribute:: __mapper_args__

      

   .. py:attribute:: id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: calendar_year
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: period_count
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: status
      :type: sqlalchemy.orm.Mapped[ReportingPeriod.Status]

      

   .. py:method:: __repr__() -> str


   .. py:method:: date_year(date: datetime.datetime = None, entity=None) -> int
      :staticmethod:

      Returns the calendar year for the given date.

      :param date: The date whose calendar year is
      :type date: :obj:`datetime`, optional
      :param to be found. Defaults to the current date.:
      :param entity: The Entity for whom the calendar year
                     is to be found. If absent, defaults to the calendar year.
      :type entity: :obj:`int`, optional

      :returns: The calendar year.
      :rtype: int


   .. py:method:: get_period(session, date: datetime.datetime) -> ReportingPeriod
      :staticmethod:

      Returns the reporting period for the given date.

      :param session: The accounting session to which the Reporting Period
                      belongs.
      :type session: Session
      :param date: The date whose Reporting Period is to be found.
      :type date: datetime

      :raises MissingReportingPeriodError: If there no Reporting Period exists for the
          given date.

      :returns: The Reporting Period.
      :rtype: ReportingPeriod


   .. py:method:: validate(session) -> None

      Validates the Reporting Period properties.

      :param session: The accounting session to which the Balance belongs.
      :type session: Session

      :raises DuplicateReportingPeriodError: If there already exists a Reporting Period
          for the same calendar year.
      :raises MultipleOpenPeriodsError: If there already exists a Reporting Period
          in the OPEN status.
      :raises InvalidBalanceTransactionError: If the Balance Transaction type is
          not one of the Balance Transaction types.

      :returns: None


   .. py:method:: interval(date: datetime.datetime = None) -> dict

      Returns the start and end dates of the Reporting Period.

      :param session: The accounting session to which the Reporting Period
                      belongs.
      :type session: Session
      :param date: The date for whose Reporting Period's inteerval is to
                   be found.
      :type date: datetime

      :raises MissingReportingPeriodError: If there no Reporting Period exists for the
          given date.

      :returns: The Reporting Period.
      :rtype: ReportingPeriod



.. py:class:: Entity


   Bases: :py:obj:`src.models.Recyclable`

   Represents the Reporting Entity.

   .. attribute:: id

      The primary key of the Entity database record.

      :type: int

   .. attribute:: name

      The Name of the Entity.

      :type: str

   .. attribute:: multi_currency

      Determines if the Entity can
      have Transactions in currencies other than its base Currency.
      Defaults to False.

      :type: :obj:`bool`, optional

   .. attribute:: mid_year_balances

      Determines if the Entity
      can have Opening Balances withing the current Reporting Period.
      Defaults to False.

      :type: :obj:`bool`, optional

   .. attribute:: year_start

      The month at which the Entity's Reporting
      Periods begin, expressed as a number between 1 and 12. Defaults to 1
      (January).

      :type: :obj:`int`, optional

   .. attribute:: locale

      The language format to be used to represent amounts. Defaults
      to en_GB.

      :type: str

   .. attribute:: currency_id

      The id of the Reporting Currency of
      the Entity.

      :type: :obj:`int`, optional

   .. attribute:: reporting_period_id

      The current Reporting Period
      of the Entity.

      :type: :obj:`int`, optional

   .. py:attribute:: __mapper_args__

      

   .. py:attribute:: id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: name
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: multi_currency
      :type: sqlalchemy.orm.Mapped[bool]

      

   .. py:attribute:: mid_year_balances
      :type: sqlalchemy.orm.Mapped[bool]

      

   .. py:attribute:: year_start
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: locale
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: currency_id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: reporting_period_id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: currency
      :type: sqlalchemy.orm.Mapped[Currency]

      

   .. py:attribute:: reporting_period
      :type: sqlalchemy.orm.Mapped[src.models.ReportingPeriod]

      

   .. py:attribute:: users
      :type: sqlalchemy.orm.Mapped[List[User]]

      

   .. py:method:: __repr__() -> str



.. py:class:: Account


   Bases: :py:obj:`src.mixins.IsolatingMixin`, :py:obj:`src.models.recyclable.Recyclable`

   Represents an account which groups related Transactions.

   .. attribute:: AccountType

      Account Types as defined by IFRS and GAAP.

      :type: StrEnum

   .. attribute:: purchasables

      A list of Account
      Types that can be used in purchasing Transactions.

      :type: :obj:`list` of :obj:`Account.AccountType`

   .. attribute:: id

      The primary key of the Account database record.

      :type: int

   .. attribute:: name

      The label of the Account.

      :type: str

   .. attribute:: decsription

      A narration of the purpose of the Account.

      :type: :obj:`str`, optional

   .. attribute:: account_type

      The type of the Account.

      :type: AccountType

   .. attribute:: currency_id

      The id of the Currency model associated with the Account.

      :type: int

   .. attribute:: category_id

      The id of the Category model to which
      the Account belongs.

      :type: :obj:`int`, optional

   .. py:attribute:: AccountType

      

   .. py:attribute:: purchasables

      

   .. py:attribute:: __mapper_args__

      

   .. py:attribute:: id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: name
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: description
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: account_code
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: account_type
      :type: sqlalchemy.orm.Mapped[strenum.StrEnum]

      

   .. py:attribute:: currency_id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: category_id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: currency
      :type: sqlalchemy.orm.Mapped[Currency]

      

   .. py:attribute:: category
      :type: sqlalchemy.orm.Mapped[Category]

      

   .. py:method:: _get_account_code(session) -> int

      Get the auto generated account code for the instance


   .. py:method:: __repr__() -> str


   .. py:method:: balance_movement(session, start_date: datetime.datetime, end_date: datetime.datetime) -> decimal.Decimal

      Get the change in the account balance between the given dates.

      :param session: The accounting session to which the Account belongs.
      :type session: Session
      :param start_date: The earliest transaction date for Transaction amounts to be
                         included in the balance.
      :type start_date: datetime
      :param end_date: The latest transaction date for Transaction amounts to be included
                       in the balance.
      :type end_date: datetime

      :returns:

                The difference between the balance of the Account at the start date and
                    end date.
      :rtype: Decimal


   .. py:method:: section_balances(session, account_types: list, start_date: datetime.datetime = None, end_date: datetime.datetime = None, full_balance: bool = True) -> dict
      :staticmethod:

      Gets the opening, movement and closing balances of the accounts of the given section
      (account types), organized by category.

      :param session: The accounting session to which the Account belongs.
      :type session: Session
      :param account_types: The Account types
                            belonging to the section.
      :type account_types: :obj:`list` of :obj:`Account.AccountType`
      :param start_date: The earliest transaction date for Transaction amounts to be
                         included in the balance.
      :type start_date: datetime
      :param end_date: The latest transaction date for Transaction amounts to be included
                       in the balance.
      :type end_date: datetime
      :param full_balance: Whether to include opening balance amounts in the balance.
      :type full_balance: bool

      :returns:

                A summary of the total opening, balance movement and closing balance, which
                    details of totals by Category and the Accounts contained in each Category.
      :rtype: dict


   .. py:method:: opening_balance(session, year: int = None) -> decimal.Decimal

      Gets the the opening balance for the account for the given year.

      :param session: The accounting session to which the Account belongs.
      :type session: Session
      :param year: The calendar year for which to retrieve the opening balance.
      :type year: int

      :returns: The total opening balance of the Account for the year.
      :rtype: Decimal


   .. py:method:: closing_balance(session, end_date: datetime.datetime = None) -> decimal.Decimal

      Gets the the closing balance of the Account as at the given date.

      :param session: The accounting session to which the Account belongs.
      :type session: Session
      :param end_date: The latest transaction date for Transaction
                       amounts to be included in the balance.
      :type end_date: datetime

      :returns: The total opening balance of the Account for the year.
      :rtype: Decimal


   .. py:method:: statement(session, start_date: datetime.datetime = None, end_date: datetime.datetime = None, schedule: bool = False) -> dict

      Gets a chronological listing of the Transactions posted to the Account between
          the dates given.

      :param session: The accounting session to which the Account belongs.
      :type session: Session
      :param start_date: The earliest transaction date for Transaction amounts
                         to be included in the statement.
      :type start_date: datetime
      :param end_date: The latest transaction date for Transaction amounts to
                       be included in the statement.
      :type end_date: datetime
      :param schedule: Whether to exclude assignable Transactions and only list
                       clearable Transactions with outstanding amounts.
      :type schedule: bool

      :raises InvalidAccountTypeError: If the Account type is not Receivable or Payable.

      :returns:

                With a A summary of the opening and closing balance in the case of
                    a statement, the total, cleared and uncleared amounts if its a schedule
                    together with a list of Transactions.
      :rtype: dict


   .. py:method:: validate(session) -> None

      Validates the Account properties.

      :param session: The accounting session to which the Account belongs.
      :type session: Session

      :raises InvalidCategoryAccountTypeError: If the account type of the Account
          does not match that of its assigned Category.

      :returns: None


   .. py:method:: validate_delete(session) -> None

      Validates if the account can be deleted.

      :param session: The accounting session to which the Account belongs.
      :type session: Session

      :raises HangingTransactionsError: If the Account has had Transactions during the
          current Reporting period.

      :returns: None



.. py:class:: Category


   Bases: :py:obj:`src.mixins.IsolatingMixin`, :py:obj:`src.models.Recyclable`

   Represents a grouping of Accounts of the same type.

   .. attribute:: id

      The primary key of the Category database record.

      :type: int

   .. attribute:: category_account_type

      The Account
      type of the members of the Category.

      :type: :obj:`list` of :obj:`Account.AccountType`

   .. attribute:: name

      The label of the Category.

      :type: str

   .. py:attribute:: __mapper_args__

      

   .. py:attribute:: id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: name
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: category_account_type
      :type: sqlalchemy.orm.Mapped[strenum.StrEnum]

      

   .. py:attribute:: accounts
      :type: sqlalchemy.orm.Mapped[List[src.models.Account]]

      

   .. py:method:: __repr__() -> str


   .. py:method:: validate(_) -> None

      Validates the Category properties.

      :param session: The accounting session to which the Category belongs.
      :type session: Session

      :raises InvalidAccountTypeError: If the category account type is not one of
      :raises Account.AccountType.:

      :returns: None


   .. py:method:: account_balances(session, end_date: datetime.datetime = None) -> dict

      Returns the Accounts belonging to the Category and their balances.

      :param session: The accounting session to which the Account belongs.
      :type session: Session
      :param end_date: The latest transaction date for Transaction amounts to be included
                       in the Account balances.
      :type end_date: datetime

      :returns: With a A summary of the total of the Account balances of the together with a list
                of the Accounts themselves.
      :rtype: dict



.. py:class:: LineItem(**kw: Any)


   Bases: :py:obj:`src.mixins.IsolatingMixin`, :py:obj:`src.models.Recyclable`

   Represents a Line Item which the other side of the double entry from the main account
   of a Transaction.

   .. attribute:: id

      The primary key of the Line Item database record.

      :type: int

   .. attribute:: narration

      A short description of the Line Item's contribution to the
      Transaction.

      :type: str

   .. attribute:: quantity

      The multiple of the Line Item amount to be posted to the
      Ledger.

      :type: Decimal

   .. attribute:: amount

      The amount to be posted to the Line Item Account.

      :type: Decimal

   .. attribute:: credited

      Determines whether the Line Item amount will
      be posted to the credit side of the Line Item Account. Defaults to False.

      :type: :obj:`bool`, optional

   .. attribute:: tax_inclusive

      Determines whether the Tax amount of the
      Line Item is included in the Line Item amount. Defaults to False.

      :type: :obj:`bool`, optional

   .. attribute:: account_id

      The id of the Account model associated with the Line Item.

      :type: int

   .. attribute:: transaction_id

      The id of the Transaction model associated
      with the Line Item.

      :type: :obj:`int`, optional

   .. attribute:: tax_id

      The id of the Tax model associated with the Line Item.

      :type: :obj:`int`, optional

   .. py:attribute:: __tablename__
      :value: 'line_item'

      

   .. py:attribute:: __mapper_args__

      

   .. py:attribute:: id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: narration
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: quantity
      :type: sqlalchemy.orm.Mapped[decimal.Decimal]

      

   .. py:attribute:: amount
      :type: sqlalchemy.orm.Mapped[decimal.Decimal]

      

   .. py:attribute:: credited
      :type: sqlalchemy.orm.Mapped[bool]

      

   .. py:attribute:: tax_inclusive
      :type: sqlalchemy.orm.Mapped[bool]

      

   .. py:attribute:: account_id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: transaction_id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: tax_id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: account
      :type: sqlalchemy.orm.Mapped[Account]

      

   .. py:attribute:: tax
      :type: sqlalchemy.orm.Mapped[Tax]

      

   .. py:attribute:: transaction
      :type: sqlalchemy.orm.Mapped[Transaction]

      

   .. py:attribute:: ledgers
      :type: sqlalchemy.orm.Mapped[List[Ledger]]

      

   .. py:method:: validate_ledgers(key, ledger, is_remove)

      validates adding or removing of Line Item Ledgers.


   .. py:method:: __repr__() -> str


   .. py:method:: validate(_) -> None

      Validates the Line Item properties.

      :param session: The accounting session to which the Line Item belongs.
      :type session: Session

      :raises NegativeAmountError: If the Line Item amount or quantity is less than 0.

      :returns: None


   .. py:method:: validate_delete(session) -> None

      Validates if the line item can be deleted.




.. py:class:: Transaction


   Bases: :py:obj:`src.mixins.IsolatingMixin`, :py:obj:`src.models.Recyclable`

   Represents a Transaction in the sense of an original source document.

   .. attribute:: TransactionType

      Transaction Types representing common
      Transaction.

      :type: StrEnum

   .. attribute:: id

      The primary key of the Transaction database record.

      :type: int

   .. attribute:: transaction_date

      The date of the Transaction.

      :type: datetime

   .. attribute:: transaction_type

      The Transaction type of the Transaction.

      :type: TransactionType

   .. attribute:: narration

      A short description of the purpose of the Transaction.

      :type: str

   .. attribute:: reference

      Identifying information about the Transaction.

      :type: :obj:`str`, optional

   .. attribute:: main_account_amount

      The amount to be posted to the Transaction
      main Account. Only applies to compound (Journal Entry) Transactions.

      :type: :obj:`Decimal`, optional

   .. attribute:: credited

      Determines whether the Transaction amount will
      be posted to the credit side of the main Account. Defaults to True.

      :type: :obj:`bool`, optional

   .. attribute:: compound

      Determines whether the (Journal Entry) Transaction amount
      can have Line Items on both sides of the double entry.

      :type: :obj:`bool`, optional

   .. attribute:: currency_id

      The id of the Currency associated with the Transaction.

      :type: int

   .. attribute:: account_id

      The id of the Account model to which Transaction amounts are to be posted.

      :type: int

   .. py:property:: tax
      :type: dict

      The taxes that have been applied to the transaction.

   .. py:property:: is_posted
      :type: bool

      Check if the Transaction has been posted to the ledger

   .. py:property:: amount
      :type: decimal.Decimal

      The amount of the Transaction.

   .. py:attribute:: TransactionType

      

   .. py:attribute:: __table_args__
      :value: ()

      

   .. py:attribute:: __tablename__
      :value: 'transaction'

      

   .. py:attribute:: __mapper_args__

      

   .. py:attribute:: id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: transaction_date
      :type: sqlalchemy.orm.Mapped[datetime.datetime]

      

   .. py:attribute:: transaction_no
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: transaction_type
      :type: sqlalchemy.orm.Mapped[strenum.StrEnum]

      

   .. py:attribute:: narration
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: reference
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: main_account_amount
      :type: sqlalchemy.orm.Mapped[decimal.Decimal]

      

   .. py:attribute:: credited
      :type: sqlalchemy.orm.Mapped[bool]

      

   .. py:attribute:: compound
      :type: sqlalchemy.orm.Mapped[bool]

      

   .. py:attribute:: currency_id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: account_id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: currency
      :type: sqlalchemy.orm.Mapped[Currency]

      

   .. py:attribute:: account
      :type: sqlalchemy.orm.Mapped[src.models.Account]

      

   .. py:attribute:: line_items
      :type: sqlalchemy.orm.Mapped[Set[src.models.LineItem]]

      

   .. py:attribute:: ledgers
      :type: sqlalchemy.orm.Mapped[List[Ledger]]

      

   .. py:method:: validate_line_items(key, line_item, is_remove)

      validates adding or removing of Transaction Line Items.


   .. py:method:: validate_ledgers(key, ledger, is_remove)

      validates adding or removing of Line Item Ledgers


   .. py:method:: __repr__() -> str


   .. py:method:: _get_main_account(session) -> src.models.Account

      Retrieve the main account of the tranaction from the database.


   .. py:method:: _transaction_no(session, transaction_type, reporting_period) -> str

      Get the next auto-generated transaction number.


   .. py:method:: is_secure(session) -> bool

      Verify that the Transaction's Ledgers have not been tampered with.


   .. py:method:: post(session) -> None

      Posts the Transaction to the Ledger.

      :param session: The accounting session to which the Reporting Period
                      belongs.
      :type session: Session

      :raises MissingLineItemError: If the Transaction has no Line Items.

      :returns: None


   .. py:method:: contribution(session, account: src.models.Account) -> decimal.Decimal

      Gets the amount contributed by the account to the transaction total.

      :param session: The accounting session to which the Reporting Period
                      belongs.
      :type session: Session
      :param account: The Account who's contribution is to be found.
      :type account: Account

      :returns: The amount posted to the Account by the Transaction.
      :rtype: Decimal


   .. py:method:: validate(session) -> None

      Validates the Transaction properties.

      :param session: The accounting session to which the Balance belongs.
      :type session: Session

      :raises PostedTransactionError: If Transaction is already posted.
      :raises ClosedReportingPeriodError: If the Transaction date is with a Reporting Period
          in the CLOSED status.
      :raises AdjustingReportingPeriodError: If the Transaction date is with a Reporting Period
          in the ADJUSTING status and is not a Journal Entry.
      :raises InvalidTransactionDateError: If the Transaction date is exactly the beginning of
          the Reporting Period.
      :raises InvalidTransactionTypeError: If the Transaction type is being modified.
      :raises RedundantTransactionError: If the Transaction main Account is also one of its
          Line Items Accounts.

      :returns: None


   .. py:method:: validate_delete(_) -> None

      Validates if the Transaction can be deleted.

      :param session: The accounting session to which the Balance belongs.
      :type session: Session

      :raises PostedTransactionError: If Transaction is already posted.

      :returns: None



.. py:class:: Balance


   Bases: :py:obj:`src.mixins.IsolatingMixin`, :py:obj:`src.mixins.ClearingMixin`, :py:obj:`src.models.Recyclable`

   Represents a Balance brought down from previous reporting periods.

   .. attribute:: BalanceType

      The double entry types of Balances.

      :type: StrEnum

   .. attribute:: BalanceTransactions

      A list of Transaction Types that can have Balances.

      :type: StrEnum

   .. attribute:: id

      The primary key of the Account database record.

      :type: int

   .. attribute:: transaction_date

      The date of the Balance Transaction.

      :type: datetime

   .. attribute:: reference

      Identifying information about the Balance Transaction.

      :type: :obj:`str`, optional

   .. attribute:: transaction_no

      The Transaction number of the Balance Transaction.

      :type: str

   .. attribute:: transaction_type

      The Transaction type of the Balance Transaction.

      :type: TransactionType

   .. attribute:: amount

      The amount outstanding on the Balance Transaction.

      :type: Decimal

   .. attribute:: balance_type

      The side of the double entry to post the Balance amount.

      :type: BalanceType

   .. attribute:: currency_id

      The id of the Currency model associated with the Balance.

      :type: int

   .. attribute:: account_id

      The id of the Account model to which the Balance belongs.

      :type: int

   .. attribute:: reporting_period_id

      The id of the Reporting Period model to which the
      Balance belongs.

      :type: int

   .. py:property:: is_posted
      :type: bool

      is_posted analog for the assignment model.

   .. py:property:: credited
      :type: bool

      credited analog for the assignment model.

   .. py:property:: compound
      :type: bool

      compound analog for the assignment model.

   .. py:attribute:: BalanceType

      

   .. py:attribute:: BalanceTransactions

      

   .. py:attribute:: __mapper_args__

      

   .. py:attribute:: id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: transaction_date
      :type: sqlalchemy.orm.Mapped[datetime.datetime]

      

   .. py:attribute:: reference
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: transaction_no
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: transaction_type
      :type: sqlalchemy.orm.Mapped[strenum.StrEnum]

      

   .. py:attribute:: amount
      :type: sqlalchemy.orm.Mapped[decimal.Decimal]

      

   .. py:attribute:: balance_type
      :type: sqlalchemy.orm.Mapped[strenum.StrEnum]

      

   .. py:attribute:: currency_id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: account_id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: reporting_period_id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: currency
      :type: sqlalchemy.orm.Mapped[src.models.Currency]

      

   .. py:attribute:: account
      :type: sqlalchemy.orm.Mapped[src.models.Account]

      

   .. py:attribute:: reporting_period
      :type: sqlalchemy.orm.Mapped[src.models.ReportingPeriod]

      

   .. py:method:: __repr__() -> str


   .. py:method:: opening_trial_balance(session, year: int = None) -> dict
      :staticmethod:

      Gets the total opening balances for the Entity's accounts for the given year.

      :param session: The accounting session to which the Account belongs.
      :type session: Session
      :param year: The calendar year to retrieve the opening
                   trial balance for. Defaults to the Balance's Entity current Reporting
                   Period's calendar year.
      :type year: :obj:`int`, optional

      :returns:

                With a A summary of the debit and credit balances of the Accounts
                    together with a list of the Accounts themselves.
      :rtype: dict


   .. py:method:: validate(session) -> None

      Validates the Balance properties.

      :param session: The accounting session to which the Balance belongs.
      :type session: Session

      :raises NegativeAmountError: If the Balance amount is less than 0.
      :raises InvalidBalanceAccountError: If the Balance main Accounr is an Income
          Statement Account.
      :raises InvalidBalanceTransactionError: If the Balance Transaction type is
          not one of the Balance Transaction types.
      :raises InvalidBalanceDateError: If the Balance Transaction date is within
          the current reporting period and the Entity does not allow mid
          year balances.

      :returns: None



.. py:class:: Tax


   Bases: :py:obj:`src.mixins.IsolatingMixin`, :py:obj:`src.models.Recyclable`

   Represents a Tax applied to a Transaction's Line Item.

   .. attribute:: id

      The primary key of the Tax database record.

      :type: int

   .. attribute:: name

      The label of the Tax.

      :type: str

   .. attribute:: code

      A shorthand representation of the Tax.

      :type: str

   .. attribute:: rate

      The percentage rate of the Tax.

      :type: Decimal

   .. attribute:: account_id

      The id of the Account model to which Tax amounts are
      posted.

      :type: int

   .. py:attribute:: __mapper_args__

      

   .. py:attribute:: id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: name
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: code
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: rate
      :type: sqlalchemy.orm.Mapped[decimal.Decimal]

      

   .. py:attribute:: account_id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: account
      :type: sqlalchemy.orm.Mapped[src.models.Account]

      

   .. py:method:: __repr__() -> str


   .. py:method:: validate(session) -> None

      Validates the Tax properties.

      :param session: The accounting session to which the Balance belongs.
      :type session: Session

      :raises NegativeAmountError: If the Tax rate is less than 0.
      :raises MissingTaxAccountError: If the Tax rate is greater than 0 and the Tax Account
          is not set.
      :raises InvalidTaxAccountError: If the Tax Account type is not Control.

      :returns: None


   .. py:method:: validate_delete(session) -> None

      Validates if the Tax can be deleted.

      :param session: The accounting session to which the Tax belongs.
      :type session: Session

      :raises HangingTransactionsError: If there exists posted Transactions with Line Items
          that have this Tax applied to them.

      :returns: None



.. py:class:: Ledger


   Bases: :py:obj:`src.mixins.IsolatingMixin`, :py:obj:`src.models.Recyclable`

   Represents an entry in the Ledger. This class should never have to be invoked directly

   .. attribute:: id

      The primary key of the ledger database record.

      :type: int

   .. attribute:: transaction_date

      The date of the Transaction associated with
      the Ledger.

      :type: datetime

   .. attribute:: entry_type

      The side of the double entry to which the Ledger

      :type: BalanceType

   .. attribute:: is posted.

      

   .. attribute:: amount

      The amount posted to the Ledger by the entry.

      :type: Decimal

   .. attribute:: hash

      The encoded contents of the Ledger entry.

      :type: str

   .. attribute:: transaction_id

      The id of the Transaction associated with
      the Ledger.

      :type: int

   .. attribute:: currency_id

      The id of the Currency associated with the Ledger.

      :type: int

   .. attribute:: post_account_id

      The id of the Account to which the Ledger is posted.

      :type: int

   .. attribute:: folio_account_id

      The id of the Account to which the opposite side
      of Ledger is posted.

      :type: int

   .. attribute:: line_item_id

      The id of the Line Item associated with
      the Ledger.

      :type: :obj:`int`, optional

   .. attribute:: tax_id

      The id of the Tax associated with the Ledger.

      :type: :obj:`int`, optional

   .. py:attribute:: __mapper_args__

      

   .. py:attribute:: id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: transaction_date
      :type: sqlalchemy.orm.Mapped[datetime.datetime]

      

   .. py:attribute:: entry_type
      :type: sqlalchemy.orm.Mapped[strenum.StrEnum]

      

   .. py:attribute:: amount
      :type: sqlalchemy.orm.Mapped[decimal.Decimal]

      

   .. py:attribute:: hash
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: transaction_id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: currency_id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: post_account_id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: folio_account_id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: line_item_id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: tax_id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: transaction
      :type: sqlalchemy.orm.Mapped[src.models.Transaction]

      

   .. py:attribute:: currency
      :type: sqlalchemy.orm.Mapped[Currency]

      

   .. py:attribute:: post_account
      :type: sqlalchemy.orm.Mapped[Account]

      

   .. py:attribute:: folio_account
      :type: sqlalchemy.orm.Mapped[Account]

      

   .. py:attribute:: line_item
      :type: sqlalchemy.orm.Mapped[LineItem]

      

   .. py:method:: __repr__() -> str


   .. py:method:: _allocate_amount(session, post, amount, posts, folios, transaction, entry_type) -> None
      :staticmethod:


   .. py:method:: _make_compound_ledgers(session, posts: list, folios: list, transaction: src.models.Transaction, entry_type: src.models.Balance.BalanceType) -> None
      :staticmethod:


   .. py:method:: _post_compound(session, transaction: src.models.Transaction) -> None
      :staticmethod:


   .. py:method:: _transaction_ledgers(transaction: src.models.Transaction) -> tuple
      :staticmethod:


   .. py:method:: _post_simple(session, transaction: src.models.Transaction) -> None
      :staticmethod:


   .. py:method:: post(session, transaction: src.models.Transaction) -> None
      :staticmethod:

      Posts the Transaction to the ledger.

      :param session: The accounting session to which the Account belongs.
      :type session: Session
      :param transaction: The Transaction to be posted.
      :type transaction: Transaction


   .. py:method:: get_hash(connection) -> None

      Calculate the hash of the Ledger.

      :param connection: The database connection of the accounting session
                         to which the Ledger belongs.
      :type connection: Connection

      :returns: None



.. py:class:: Assignment


   Bases: :py:obj:`src.mixins.IsolatingMixin`, :py:obj:`src.models.Base`

   Represents an assigment of a clearable type to an assignable Transaction.

   .. attribute:: clearables

      A list of
      Transaction Types that can be cleared by assignable Transactions.

      :type: :obj:`list` of :obj:`Transaction.TransactionType`

   .. attribute:: assignables

      A list of
      Transaction Types that can have cleareable Transactions assigned to them.

      :type: :obj:`list` of :obj:`Transaction.TransactionType`

   .. attribute:: assignment_date

      The date of the Assignment.

      :type: datetime

   .. attribute:: transaction_id

      The id of the assignable Transaction in the Assignment.

      :type: int

   .. attribute:: assigned_id

      The id of the clearable Transaction|Balance in the Assignment.

      :type: int

   .. attribute:: assigned_type

      The class name of the clearable Transaction|Balance in the Assignment.

      :type: str

   .. attribute:: assigned_no

      The Transaction number of the clearable Transaction|Balance
      in the Assignment.

      :type: str

   .. attribute:: amount

      The amount of the Assignment.

      :type: Decimal

   .. py:attribute:: clearables

      

   .. py:attribute:: assignables

      

   .. py:attribute:: assignment_date
      :type: sqlalchemy.orm.Mapped[datetime.datetime]

      

   .. py:attribute:: transaction_id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: assigned_id
      :type: sqlalchemy.orm.Mapped[int]

      

   .. py:attribute:: assigned_type
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: assigned_no
      :type: sqlalchemy.orm.Mapped[str]

      

   .. py:attribute:: amount
      :type: sqlalchemy.orm.Mapped[decimal.Decimal]

      

   .. py:attribute:: transaction
      :type: sqlalchemy.orm.Mapped[src.models.Transaction]

      

   .. py:method:: __repr__() -> str


   .. py:method:: assigned(session) -> src.models.Transaction | src.models.Balance

      Get the clearable Transaction|Balance assigned to this assigment's transaction.

      :param session: The accounting session to which the Assignment belongs.
      :type session: Session

      :returns: The model cleared by this assignment.
      :rtype: Transaction|Balance


   .. py:method:: validate(session) -> None

      Validates the Assignment properties.

      :param session: The accounting session to which the Assignment belongs.
      :type session: Session

      :raises ValueError: If the assignable Transaction or clearable Transaction|Balance
          could not be found.
      :raises UnassignableTransactionError: If the assignable Transaction type is not one
          of the assignable types.
      :raises UnclearableTransactionError: If the clearable Transaction type is not one
          of the clearable types.
      :raises UnpostedAssignmentError: If either the assignable or clearable Transaction
          is not posted.
      :raises InsufficientBalanceError: If the remaining balance in the assignable
          Transaction is less than the Assignment amount.
      :raises OverclearanceError: If the Assignment amount is greater than the clearable
          Transaction|Balance uncleared amount.
      :raises CompoundTransactionAssignmentError: If either the assignable or clearable
          Journal Entry is a compound Transaction.
      :raises SelfClearanceError: If the assignable and clearable Transaction of the
          Assignment is the same.
      :raises InvalidAssignmentAccountError: If the assignable Transaction and clearable
          Transaction|Balance main Accounts are not the same.
      :raises MixedAssignmentError: If either an already Transaction is being cleared or
          an already cleared Transaction is being assigned.

      :returns: None



